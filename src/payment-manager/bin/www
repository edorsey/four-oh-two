#!/usr/bin/env node

/**
 * Module dependencies.
 */

let async = require("async")
let debug = require("debug")("server:server")
let http = require("http")

let app = require("../app")
let mongo = require("../services/mongo")
let nano = require("../services/nano")

/**
 * Get port from environment and store in Express.
 */

let server

let port = normalizePort(process.env.PORT || "3402")
app.set("port", port)

async.waterfall([
  mongo.connect,
  bootstrapIfNeeded,
  createServer
], (err) => {
  if (err) throw err

  let addr = server.address()
  let bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port

  console.log(`Listening on ${bind}`)
})

function bootstrapIfNeeded(db, next) {
  async.waterfall([
    checkBootstrap(db),
    bootstrap
  ], function bootstrapped(err) {
    if (err) return next(err)
    next(null, db)
  })
}

function checkBootstrap(db) {
  return function callCheckBootstrap(next) {
    db.collection("settings").findOne({
      "name": "bootstrapped"
    }, next)
  }
}

function bootstrap(setting, next) {
  if (!next) {
    next = setting
    setting = null
  }

  if (setting && setting.value === true) return next()

  nano.bootstrap(next)
}

function createServer(db, next) {
  server = http.createServer(app)

  app.set("db", db)

  server.listen(port)
  server.on("error", onError)
  server.on("listening", next)
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  let bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind}  requires elevated privileges`)
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

process.on("uncaughtException", function onUncaughtException(err) {
  console.log(err)
  process.exit(1)
})

process.on("SIGINT", process.exit)
